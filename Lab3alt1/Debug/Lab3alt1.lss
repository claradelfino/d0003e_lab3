
Lab3alt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000223  00800102  00800102  00000356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012bc  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081b  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cc  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a7b  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 ec       	ldi	r30, 0xC0	; 192
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a2 30       	cpi	r26, 0x02	; 2
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a2 e0       	ldi	r26, 0x02	; 2
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 32       	cpi	r26, 0x25	; 37
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  92:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <disableClockPrescaler>:
			}
		}
		
		if(TCNT1 >= VAR_REG) {
			VAR_REG= VAR_REG +(8000000 / (256*2)); 
			*LCDADDR18 = *LCDADDR18 ^ 0x01; 
  9a:	e1 e6       	ldi	r30, 0x61	; 97
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24
  a2:	10 82       	st	Z, r1
  a4:	08 95       	ret

000000a6 <initLCD>:
  a6:	87 ef       	ldi	r24, 0xF7	; 247
  a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  b8:	80 ec       	ldi	r24, 0xC0	; 192
  ba:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  be:	08 95       	ret

000000c0 <blink>:
  c0:	e1 e8       	ldi	r30, 0x81	; 129
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
  ca:	20 81       	ld	r18, Z
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
  d2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
  d6:	28 17       	cp	r18, r24
  d8:	39 07       	cpc	r19, r25
  da:	c9 f7       	brne	.-14     	; 0xce <blink+0xe>
  dc:	2e 5e       	subi	r18, 0xEE	; 238
  de:	35 48       	sbci	r19, 0x85	; 133
  e0:	ee ef       	ldi	r30, 0xFE	; 254
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	91 81       	ldd	r25, Z+1	; 0x01
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	84 27       	eor	r24, r20
  ec:	91 83       	std	Z+1, r25	; 0x01
  ee:	80 83       	st	Z, r24
  f0:	ee cf       	rjmp	.-36     	; 0xce <blink+0xe>

000000f2 <main>:


int main(void)
{

	disableClockPrescaler();
  f2:	0e 94 4d 00 	call	0x9a	; 0x9a <disableClockPrescaler>
	initLCD();
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <initLCD>
	
	//computePrimes(0);
	
	//button();
	blink();
  fa:	0e 94 60 00 	call	0xc0	; 0xc0 <blink>

000000fe <enqueue>:
	}
	SETSTACK(&newp->context, &newp->stack);

	enqueue(newp, &readyQ);
	ENABLE();
}
  fe:	dc 01       	movw	r26, r24
 100:	15 96       	adiw	r26, 0x05	; 5
 102:	1c 92       	st	X, r1
 104:	1e 92       	st	-X, r1
 106:	14 97       	sbiw	r26, 0x04	; 4
 108:	db 01       	movw	r26, r22
 10a:	ed 91       	ld	r30, X+
 10c:	fc 91       	ld	r31, X
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	30 97       	sbiw	r30, 0x00	; 0
 112:	21 f4       	brne	.+8      	; 0x11c <enqueue+0x1e>
 114:	8d 93       	st	X+, r24
 116:	9c 93       	st	X, r25
 118:	08 95       	ret
 11a:	f9 01       	movw	r30, r18
 11c:	24 81       	ldd	r18, Z+4	; 0x04
 11e:	35 81       	ldd	r19, Z+5	; 0x05
 120:	21 15       	cp	r18, r1
 122:	31 05       	cpc	r19, r1
 124:	d1 f7       	brne	.-12     	; 0x11a <enqueue+0x1c>
 126:	95 83       	std	Z+5, r25	; 0x05
 128:	84 83       	std	Z+4, r24	; 0x04
 12a:	08 95       	ret

0000012c <dequeue>:
 12c:	dc 01       	movw	r26, r24
 12e:	ed 91       	ld	r30, X+
 130:	fc 91       	ld	r31, X
 132:	11 97       	sbiw	r26, 0x01	; 1
 134:	30 97       	sbiw	r30, 0x00	; 0
 136:	09 f4       	brne	.+2      	; 0x13a <dequeue+0xe>
 138:	ff cf       	rjmp	.-2      	; 0x138 <dequeue+0xc>
 13a:	24 81       	ldd	r18, Z+4	; 0x04
 13c:	35 81       	ldd	r19, Z+5	; 0x05
 13e:	2d 93       	st	X+, r18
 140:	3c 93       	st	X, r19
 142:	cf 01       	movw	r24, r30
 144:	08 95       	ret

00000146 <dispatch>:
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	00 d0       	rcall	.+0      	; 0x14c <dispatch+0x6>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	06 96       	adiw	r24, 0x06	; 6
 15e:	0e 94 1d 01 	call	0x23a	; 0x23a <setjmp>
 162:	89 2b       	or	r24, r25
 164:	59 f4       	brne	.+22     	; 0x17c <dispatch+0x36>
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	06 96       	adiw	r24, 0x06	; 6
 178:	0e 94 3d 01 	call	0x27a	; 0x27a <longjmp>
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <yield>:
of the ready-queue, and then pick the first element of that queue for execution
(by means of the statement dispatch(dequeue(&readyQ)).
*/

void yield(void) {
	DISABLE();
 186:	f8 94       	cli
	enqueue(current, &readyQ);
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	71 e0       	ldi	r23, 0x01	; 1
 18c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	0e 94 7f 00 	call	0xfe	; 0xfe <enqueue>
	dispatch(dequeue(&readyQ));
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 96 00 	call	0x12c	; 0x12c <dequeue>
 1a0:	0e 94 a3 00 	call	0x146	; 0x146 <dispatch>
	ENABLE();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_3>:
A PCINT1_vect interrupt can be generated by pressing the Butterfly joystick
in the downward direction, if the logical interrupt source PCINT15 is enabled
in mask registers EIMSK and PCMSK1. PCINT15 corresponds to a change on pin 7 of PORTB.
*/

ISR(PCINT1_vect) {
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	if((PINB >> 7) == 0) {
 1ca:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 1cc:	0e 94 c3 00 	call	0x186	; 0x186 <yield>
	}
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	yield();
 214:	0e 94 c3 00 	call	0x186	; 0x186 <yield>
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <setjmp>:
 23a:	dc 01       	movw	r26, r24
 23c:	2d 92       	st	X+, r2
 23e:	3d 92       	st	X+, r3
 240:	4d 92       	st	X+, r4
 242:	5d 92       	st	X+, r5
 244:	6d 92       	st	X+, r6
 246:	7d 92       	st	X+, r7
 248:	8d 92       	st	X+, r8
 24a:	9d 92       	st	X+, r9
 24c:	ad 92       	st	X+, r10
 24e:	bd 92       	st	X+, r11
 250:	cd 92       	st	X+, r12
 252:	dd 92       	st	X+, r13
 254:	ed 92       	st	X+, r14
 256:	fd 92       	st	X+, r15
 258:	0d 93       	st	X+, r16
 25a:	1d 93       	st	X+, r17
 25c:	cd 93       	st	X+, r28
 25e:	dd 93       	st	X+, r29
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	8d b7       	in	r24, 0x3d	; 61
 266:	8d 93       	st	X+, r24
 268:	8e b7       	in	r24, 0x3e	; 62
 26a:	8d 93       	st	X+, r24
 26c:	8f b7       	in	r24, 0x3f	; 63
 26e:	8d 93       	st	X+, r24
 270:	ed 93       	st	X+, r30
 272:	fd 93       	st	X+, r31
 274:	88 27       	eor	r24, r24
 276:	99 27       	eor	r25, r25
 278:	09 94       	ijmp

0000027a <longjmp>:
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	91 05       	cpc	r25, r1
 282:	81 1d       	adc	r24, r1
 284:	2d 90       	ld	r2, X+
 286:	3d 90       	ld	r3, X+
 288:	4d 90       	ld	r4, X+
 28a:	5d 90       	ld	r5, X+
 28c:	6d 90       	ld	r6, X+
 28e:	7d 90       	ld	r7, X+
 290:	8d 90       	ld	r8, X+
 292:	9d 90       	ld	r9, X+
 294:	ad 90       	ld	r10, X+
 296:	bd 90       	ld	r11, X+
 298:	cd 90       	ld	r12, X+
 29a:	dd 90       	ld	r13, X+
 29c:	ed 90       	ld	r14, X+
 29e:	fd 90       	ld	r15, X+
 2a0:	0d 91       	ld	r16, X+
 2a2:	1d 91       	ld	r17, X+
 2a4:	cd 91       	ld	r28, X+
 2a6:	dd 91       	ld	r29, X+
 2a8:	ed 91       	ld	r30, X+
 2aa:	fd 91       	ld	r31, X+
 2ac:	0d 90       	ld	r0, X+
 2ae:	f8 94       	cli
 2b0:	fe bf       	out	0x3e, r31	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	ed bf       	out	0x3d, r30	; 61
 2b6:	ed 91       	ld	r30, X+
 2b8:	fd 91       	ld	r31, X+
 2ba:	09 94       	ijmp

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
